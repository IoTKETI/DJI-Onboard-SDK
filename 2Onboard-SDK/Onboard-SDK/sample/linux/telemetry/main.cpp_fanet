
#include "telemetry_sample.hpp"

using namespace DJI::OSDK;
using namespace DJI::OSDK::Telemetry;
using namespace std;

extern float_t cur_lati;
extern float_t cur_longi;

typedef struct tTHREAD
{
	Vehicle* v;
	int s;
}Data;





void error(const char *msg)
{
	perror(msg);
	exit(0);
}

void *myFunc(void *arg)
{
	int sockfd;
	Vehicle* vehicle;
	int readn, writen;
	char buf[256];
	Data* d  = (Data*)arg;
	sockfd = d->s;
	vehicle = d->v;

	while (1)
	{

		getBroadcastData(vehicle, 1, sockfd);

	
	}
}

void *myFunc_fanet(void *arg)
{
	Vehicle* vehicle;
	Data* d  = (Data*)arg;
//	sockfd = d->s;
	vehicle = d->v;

	int sockfd, portno, n;
	struct sockaddr_in serv_addr;
	struct hostent *server;

	portno = atoi("5555");
	sockfd = socket(PF_INET, SOCK_DGRAM, 0);
	if (sockfd < 0)
			error("ERROR opening socket");
	server = gethostbyname("192.168.10.1");

	bzero((char *)&serv_addr, sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	bcopy((char *)server->h_addr,
			(char *)&serv_addr.sin_addr.s_addr,
			server->h_length);
	serv_addr.sin_port = htons(portno);

	if (connect(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
	{
		error("ERROR connecting");
	}



	while (1)
	{

		getBroadcastData(vehicle, 1, sockfd);

	
	}
}



int main(int argc, char *argv[])
{

	  // Setup OSDK.
	  Data d;

	  int functionTimeout = 1;
	  int     responseTimeout = 1;
	  uint8_t num_way = 1;
	  LinuxSetup linuxEnvironment(argc, argv);
	  Vehicle*   vehicle = linuxEnvironment.getVehicle();

	  if (vehicle == NULL)
	  {
		std::cout << "Vehicle not initialized, exiting.\n";
		return -1;
	  }

	int sockfd, portno, n;
	struct sockaddr_in serv_addr;
	struct hostent *server;
	pthread_t thread_t;
	int th_id;
	char buffer[256];
	int time = 0;

	portno = atoi("3105");
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd < 0)
		error("ERROR opening socket");
	server = gethostbyname("127.0.0.1");

	bzero((char *)&serv_addr, sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	bcopy((char *)server->h_addr,
		(char *)&serv_addr.sin_addr.s_addr,
		server->h_length);
	serv_addr.sin_port = htons(portno);

	if (connect(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
	{
		error("ERROR connecting");
	}

	d.v = vehicle;
	d.s = sockfd;


	th_id = pthread_create(&thread_t, NULL, myFunc, (void *)&d);
	if (th_id != 0)
	{
		perror("Thread Create Error");
		return 1;
	}
	pthread_detach(thread_t);
	
	
	pthread_t thread_t_fanet;
	int th_id_fanet;
	Data d_fanet;
	d_fanet.v = vehicle;
	
	th_id_fanet = pthread_create(&thread_t_fanet, NULL, myFunc_fanet, (void *)&d_fanet);
	if (th_id != 0)
	{
		perror("Thread Create Error");
		return 1;
	}
	pthread_detach(thread_t_fanet);


	while (1)
	{

                if (recv(sockfd, buffer, 255, MSG_DONTWAIT) != -1)
                {
                        printf("Data : %s\n", buffer);

					char* token = NULL;
					
					char split[] = ":";
					string str[50];
					int i=0;

					token = strtok(buffer, split);

					while (token != NULL)
					{
						printf("token = %s\n", token);
						str[i] = string(token);
						cout<<str[i]<<"\n";
						token = strtok(NULL, split);
						i++;

					}

					vehicle->obtainCtrlAuthority(functionTimeout);
					
					char* sw_d = new char [2];
					strcpy(sw_d,str[0].c_str());


					switch (sw_d[0])
					{
			
					case 't':

						monitoredTakeoff(vehicle);

						break;

					case 'l':

						monitoredLanding(vehicle);

						break;
										
					case 'm':
						
						moveByPositionOffset(vehicle, strtof(str[1].c_str(), 0), strtof(str[2].c_str(), 0), strtof(str[3].c_str(), 0), strtof(str[4].c_str(), 0));
			
						break;
						
					case 'a':
						
						moveByPositionOffset(vehicle, 0, 0, strtof(str[1].c_str(), 0), 0, 0);
			
						break;

					case 'g':
												
						runWaypointMission(vehicle, num_way,responseTimeout, (strtof(str[1].c_str(), 0)/57.295779513082320876798154814), (strtof(str[2].c_str(), 0)/57.295779513082320876798154814), strtof(str[3].c_str(), 0));

						break;

					case 'h':

                                                monitoredGoHome(vehicle);

                                                break;

					default:
						break;
					}
                        memset(buffer, 0, sizeof(char)* 256);
			

                }

	}

	

	close(sockfd);

	return 0;
}
